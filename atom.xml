<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://syl2017.github.io/</id>
    <title>亮仔的博客</title>
    <updated>2020-05-12T01:00:54.200Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://syl2017.github.io/"/>
    <link rel="self" href="https://syl2017.github.io/atom.xml"/>
    <subtitle>转身从此陌生</subtitle>
    <logo>https://syl2017.github.io/images/avatar.png</logo>
    <icon>https://syl2017.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 亮仔的博客</rights>
    <entry>
        <title type="html"><![CDATA[UML简介与入门]]></title>
        <id>https://syl2017.github.io/post/uml-jian-jie-yu-ru-men/</id>
        <link href="https://syl2017.github.io/post/uml-jian-jie-yu-ru-men/">
        </link>
        <updated>2020-05-12T00:47:05.000Z</updated>
        <content type="html"><![CDATA[<p>UML是Unified Modeling language(UML) 称为统一建模语言或标准建模语言，支持模型化和软件系统开发的图形化语言。</p>
<h5 id="分类两类">分类（两类）</h5>
<ul>
<li>结构型的图（Structure Diagram）</li>
</ul>
<ol>
<li>类图(Class  Diagram)</li>
<li>对象图(Object Diagram)</li>
<li>构件图(Component Diagram)</li>
<li>部署图(Deployment Diagram)</li>
<li>包图（Package Diagram）</li>
</ol>
<ul>
<li>行为型的图（Behavior Diagram)</li>
</ul>
<ol>
<li>
<p>活动图(Activity Digram)</p>
</li>
<li>
<p>状态机图(State Machine Diagram)</p>
</li>
<li>
<p>顺序图(Sequence Diagram)</p>
</li>
<li>
<p>通信图(Communication Diagram)</p>
</li>
<li>
<p>用例图(Use Case Diagram)</p>
</li>
<li>
<p>时序图（Timing Diagram）</p>
</li>
</ol>
<h5 id="类图">类图</h5>
<p>矩形框代表一个类，类图分为三层</p>
<ul>
<li>第一层显示类的名</li>
<li>第二层是类的特性 （成员变量和属性）</li>
<li>第三层是类的操作，通常就是方法或是函数</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://liang-markdonw-pic.oss-cn-shenzhen.aliyuncs.com/img/Main.jpg" alt="Main" loading="lazy"></figure>
<p><strong>修改属性和方法</strong></p>
<p>​	访问权限：</p>
<ul>
<li>​		‘+’ 表示public</li>
<li>​		'-'表示private</li>
<li>​		‘#’表示protected</li>
<li>​		‘~’表示package</li>
</ul>
<p>​	其他关键字</p>
<ul>
<li>​		下划线表示static</li>
<li>​		斜体表示abstract</li>
</ul>
<p>冒号（：）</p>
<p>​	表示成员变量类型</p>
<p>​	表示方法返回值</p>
<p>等号（=）</p>
<p>​	表示默认值</p>
<p>方法的参数表示与类成员变量表示方法完全相同</p>
<p><strong>接口</strong></p>
<p>两种表现形式</p>
<ol>
<li>圆圈</li>
<li>名字上带有《interface》，方便接口展示方法</li>
</ol>
<h5 id="类与类之间的关系6种">类与类之间的关系（6种）</h5>
<p>​	类与继承泛化（Generalization)</p>
<p>【泛化关系】	是一种继承关系，表示一般与特殊的关系。</p>
<p>【箭头指向】到三角箭头的实线，箭头指向父类</p>
<p>【代码表现】为extends</p>
<figure data-type="image" tabindex="2"><img src="https://liang-markdonw-pic.oss-cn-shenzhen.aliyuncs.com/img/%E6%B3%9B%E5%8C%96.PNG" alt="" loading="lazy"></figure>
<p>接口与实现（Realization）</p>
<p>【实现关系】是类与接口的关系，类是接口的实现</p>
<p>【箭头指向】：带三角箭头的虚线箭头指向接口或是直线连接圆圈</p>
<p>【代码实现】：最典型的就是implements</p>
<p>依赖（Dependency)</p>
<p>【依赖关系】：是一种使用的关系，即一个类的实现需要另一个类的协助，尽量不使用双向依赖</p>
<p>【代码表现】：import</p>
<figure data-type="image" tabindex="3"><img src="https://liang-markdonw-pic.oss-cn-shenzhen.aliyuncs.com/img/%E4%BE%9D%E8%B5%96.PNG" alt="" loading="lazy"></figure>
<p>关联（Association）</p>
<p>【关联关系】是一种拥有的关系，一个类知道另外一个类的属性和方法</p>
<p>【代码体现】：成员变量</p>
<p>【箭头及指向】：带普通箭头的实心线，指向被拥有者。双向的关联可以有两个箭头或者没有箭头</p>
<figure data-type="image" tabindex="4"><img src="https://liang-markdonw-pic.oss-cn-shenzhen.aliyuncs.com/img/%E5%85%B3%E8%81%94.PNG" alt="" loading="lazy"></figure>
<p>聚合（Aggregation）</p>
<p>【聚合关系】：是整体与部分的关系，且部分离开整体而可以单独存在</p>
<p>【代码体现】：成员变量</p>
<p>【箭头及指向】：带空心菱形的实心线，菱形指向整体</p>
<figure data-type="image" tabindex="5"><img src="https://liang-markdonw-pic.oss-cn-shenzhen.aliyuncs.com/img/%E8%81%9A%E5%90%88.PNG" alt="" loading="lazy"></figure>
<p>组合（Composition）</p>
<p>​	【组合关系】：是整体与部分的关系，但部分不能离开整体而单独存在。</p>
<p>【代码体现】：成员变量</p>
<p>【箭头及指向】：带实心菱形的实现，菱形指向整体</p>
<figure data-type="image" tabindex="6"><img src="https://liang-markdonw-pic.oss-cn-shenzhen.aliyuncs.com/img/%E7%BB%84%E5%90%88.PNG" alt="" loading="lazy"></figure>
<p>类关系强弱对比</p>
<p>泛化=实现&gt;组合&gt;聚合&gt;关联&gt;依赖</p>
<p>组合关系是关联关系的一种，是比聚合关系还要强的关系，它要求普通的聚合关系中代表整体的对象负责代表部分的对象的生命周期。</p>
<p>聚合关系是关联关系的一种，部分与整体的生命周期不一定相同</p>
<p>关联只是表示两个类之前有交互<br>
依赖完全与生命周期无关</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://syl2017.github.io/post/hello-gridea/</id>
        <link href="https://syl2017.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>